QUES.)
Given an m x n matrix, return all elements of the matrix in spiral order.

Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]
Example 2:


Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

SOLUTION.)

class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        int row = matrix.size();
        int col = matrix[0].size();
        int total = row * col;
        int startingrow = 0;
        int startingcol = 0;
        int endingrow = row - 1;
        int endingcol = col - 1;
        int count = 0;
        vector<int> ans;
        while (count < total) {
            for (int index = startingcol; index <= endingcol; index++) {
                ans.push_back(matrix[startingrow][index]);
                count++;
            }
            startingrow++;
            for (int index = startingrow; index <= endingrow; index++) {
                ans.push_back(matrix[index][endingcol]);
                count++;
            }
            endingcol--;
            if (startingrow <= endingrow) {
                for (int index = endingcol; index >= startingcol; index--) {
                    ans.push_back(matrix[endingrow][index]);
                    count++;
                }
                endingrow--;
            }
            if (startingcol <= endingcol) {
                for (int index = endingrow; index >= startingrow; index--) {
                    ans.push_back(matrix[index][startingcol]);
                    count++;
                }
                startingcol++;
            }
        }
        return ans;
    }
};
