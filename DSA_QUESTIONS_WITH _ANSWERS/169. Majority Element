QUES.)
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2

SOLUTION.)
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int n=nums.size();
        sort(nums.begin(),nums.end());
  
    
    int max_count = 1, res = nums[0], curr_count = 1; 
    for (int i = 1; i < n; i++) { 
        if (nums[i] == nums[i - 1]) 
            curr_count++; 
        else
            curr_count = 1; 
        
        if (curr_count > max_count) { 
            max_count = curr_count; 
            res = nums[i - 1]; 
        } 
    } 
  
    return res;
    }
};
