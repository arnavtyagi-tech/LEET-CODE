QUES.)
Given the head of a singly linked list, return true if it is a 
palindrome
 or false otherwise.
Example 1:
Input: head = [1,2,2,1]
Output: true
Example 2:
Input: head = [1,2]
Output: false

SOLUTION.)
class Solution {
public:

    ListNode* reverseList(ListNode* head) {
        ListNode* curr=head;
        ListNode* prev=NULL;
        ListNode* next_node;

        while(curr!=NULL){
            next_node=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next_node;

        }
        return prev;
    }

    bool isPalindrome(ListNode* head) {
        ListNode *slow=head,*fast=head;
        while(fast->next!=NULL && fast->next->next!=NULL)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
        slow->next=reverseList(slow->next);
        ListNode *start=head,*mid=slow->next;
        while(mid!=NULL)
        {
            if(mid->val!=start->val)return false;
            start=start->next;
            mid=mid->next;
        }
        slow->next=reverseList(slow->next);
        return true;
    }
};
